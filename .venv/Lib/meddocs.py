import psycopg2
from psycopg2 import sql
import telebot
from telebot import types
from telebot.formatting import escape_markdown
import os
import shutil
from datetime import datetime


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def check_database_exists(db_name, user, password, host='localhost', port='5432'):
    conn = None
    try:
        conn = psycopg2.connect(
            dbname='postgres',
            user=user,
            password=password,
            host=host,
            port=port
        )
        cursor = conn.cursor()
        cursor.execute(f"SELECT 1 FROM pg_database WHERE datname = '{db_name}';")
        exists = cursor.fetchone()
        cursor.close()
        return exists is not None
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    finally:
        if conn:
            conn.close()


# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def create_database(db_name, user, password, host='localhost', port='5432'):
    conn = None
    try:
        conn = psycopg2.connect(
            dbname='postgres',
            user=user,
            password=password,
            host=host,
            port=port
        )
        conn.autocommit = True
        cursor = conn.cursor()
        cursor.execute(sql.SQL("CREATE DATABASE {}").format(
            sql.Identifier(db_name)
        ))
        print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
        cursor.close()
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        if conn:
            conn.close()


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def create_connection(db_name, user, password, host='localhost', port='5432'):
    conn = None
    try:
        conn = psycopg2.connect(
            dbname=db_name,
            user=user,
            password=password,
            host=host,
            port=port
        )
        return conn
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    return conn


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
def create_tables(conn):
    try:
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            username VARCHAR(255) NOT NULL
        );
        """)
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS docs (
            id SERIAL PRIMARY KEY,
            title VARCHAR(255) NOT NULL,
            body TEXT,
            user_id INTEGER REFERENCES users (id) ON DELETE CASCADE,
            tag VARCHAR(255),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """)
        conn.commit()
        cursor.close()
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users
def insert_user(conn, username):
    sql_query = ''' INSERT INTO users(username) VALUES(%s) RETURNING id; '''
    cursor = conn.cursor()
    cursor.execute(sql_query, (username,))
    user_id = cursor.fetchone()[0]
    conn.commit()
    cursor.close()
    return user_id


# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
def get_user_id_by_username(conn, username):
    sql_query = ''' SELECT id FROM users WHERE username = %s; '''
    cursor = conn.cursor()
    cursor.execute(sql_query, (username,))
    user = cursor.fetchone()
    cursor.close()
    if user:
        return user[0]
    return None


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É docs
def insert_doc(conn, title, body, user_id, tag):
    sql_query = ''' INSERT INTO docs(title, body, user_id, tag) VALUES(%s, %s, %s, %s) RETURNING id; '''
    cursor = conn.cursor()
    cursor.execute(sql_query, (title, psycopg2.Binary(body), user_id, tag))
    doc_id = cursor.fetchone()[0]
    conn.commit()
    cursor.close()
    return doc_id


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_all_docs(conn, user_id):
    sql_query = ''' SELECT id, title, body, tag, created_at FROM docs WHERE user_id = %s; '''
    cursor = conn.cursor()
    cursor.execute(sql_query, (user_id,))
    docs = cursor.fetchall()
    cursor.close()
    return docs


# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_document(bot, chat_id, file_path, doc_data, user_id):
    with open(file_path, 'rb') as file:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        bot.send_document(chat_id, file)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
    doc_info = (
        f"User ID: {user_id}\n"
        f"Tag: {doc_data[3]}\n"
        f"Created at: {doc_data[4]}\n"
    )
    bot.send_message(chat_id, doc_info)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º API
bot = telebot.TeleBot("7249509284:AAHwJ4My3WRnNiRMthQSbtGD9vppaj2AGcI")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
db_name = 'my_new_database'
user = 'postgres'
password = 'mypassword'

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
if not check_database_exists(db_name, user, password, host='localhost', port='5432'):
    create_database(db_name, user, password, host='localhost', port='5432')

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
conn = create_connection(db_name, user, password, host='localhost', port='5432')

if conn is not None:
    create_tables(conn)
else:
    print("–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    exit()


# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
@bot.message_handler(commands=['start'])
def start(message):
    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞
    start_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!\n\n"
        "üìÇ –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.\n"
        "üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º.\n"
        "üè∑Ô∏è –ö –∫–∞–∂–¥–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥ ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n"
        "üìë –í –¥–∞–ª—å–Ω–µ–π—à–µ–º, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —ç—Ç–∏–º —Ç–µ–≥–æ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.\n"
        "üí¨ –í –±–æ—Ç–µ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ‚Äî –±—É–¥–µ–º —Ä–∞–¥—ã –ª—é–±–æ–º—É —Ñ–∏–¥–±–µ–∫—É.\n\n"
        "‚¨áÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )

    bot.send_message(message.chat.id, start_message)

    user_id = get_user_id_by_username(conn, message.from_user.username)
    if user_id:
        bot.send_message(message.chat.id, f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–∞—à ID: {user_id}")
    else:
        user_id = insert_user(conn, message.from_user.username)
        bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.username}! –í–∞—à –Ω–æ–≤—ã–π ID: {user_id}")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
    item2 = types.KeyboardButton("üìú –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    item3 = types.KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É")
    item4 = types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
    item5 = types.KeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")

    markup.add(item1, item2, item3, item4, item5)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


ADMIN_CHAT_ID = "-4278187489"


@bot.message_handler(func=lambda message: message.text in ["üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"])
def feedback(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:")
    bot.register_next_step_handler(message, process_feedback)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É"
@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É")
def search_button_handler(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(message, process_search_tag)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
@bot.message_handler(func=lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
def delete_button_handler(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_delete_document)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
def process_feedback(message):
    feedback_text = message.text
    bot.send_message(ADMIN_CHAT_ID, f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç @{message.from_user.username}: {feedback_text}")
    bot.send_message(message.chat.id, "–í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ!")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
@bot.message_handler(func=lambda message: message.text in ["üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", "üìú –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"])
def handle_action(message):
    user_id = get_user_id_by_username(conn, message.from_user.username)
    if user_id:
        if message.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç":
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å.")
            bot.register_next_step_handler(message, upload_document, user_id)
        elif message.text == "üìú –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤":
            docs = get_all_docs(conn, user_id)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if docs:
                for doc in docs:
                    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–∞–π–ª —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ uploads)
                    file_path = os.path.join(os.getcwd(), 'uploads', doc[1])

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                    if os.path.exists(file_path):
                        created_at = doc[4]
                        formatted_date = created_at.strftime('%d %B %Y, %H:%M')

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã —Ç–µ–≥ –Ω–µ –±—ã–ª None
                        tag = doc[3] if doc[3] is not None else "–ë–µ–∑ —Ç–µ–≥–∞"

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        doc_info = (
                            f"üÜî *ID –¥–æ–∫—É–º–µ–Ω—Ç–∞:* {doc[0]}\n"
                            f"üè∑Ô∏è *–¢–µ–≥:* {escape_markdown(tag)}\n"
                            f"üìÖ *–°–æ–∑–¥–∞–Ω:* {escape_markdown(formatted_date)}\n"
                        )
                        bot.send_message(message.chat.id, doc_info, parse_mode='Markdown')

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º —Ñ–∞–π–ª
                        with open(file_path, 'rb') as file:
                            bot.send_document(message.chat.id, file)
                    else:
                        bot.send_message(message.chat.id, f"–§–∞–π–ª '{doc[1]}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
def upload_document(message, user_id):
    if message.content_type == 'document':
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        file_dir = os.path.join(os.getcwd(), 'uploads')
        file_path = os.path.join(file_dir, message.document.file_name)

        os.makedirs(file_dir, exist_ok=True)

        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        bot.send_message(message.chat.id,
                         "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥ –∫ —ç—Ç–æ–º—É —Ñ–∞–π–ª—É? –ï—Å–ª–∏ –¥–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–≥. –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç'.")
        bot.register_next_step_handler(message, process_tag, file_path, downloaded_file, user_id)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞
def process_tag(message, file_path, downloaded_file, user_id):
    if message.text.lower() == '–Ω–µ—Ç':
        tag = None
    else:
        tag = message.text

    title = os.path.basename(file_path)

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        body = downloaded_file
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        body = None

    if body:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        doc_id = insert_doc(conn, title, body, user_id, tag)
        bot.send_message(message.chat.id, f"–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: {doc_id}")
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–µ–≥—É
@bot.message_handler(commands=['search'])
def search_by_tag(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(message, process_search_tag)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
def process_search_tag(message):
    tag = message.text  # –¢–µ–≥, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_id = get_user_id_by_username(conn, message.from_user.username)

    if user_id:
        docs = get_docs_by_tag(conn, user_id, tag)
        if docs:
            bot.send_message(message.chat.id, f"–î–æ–∫—É–º–µ–Ω—Ç—ã —Å —Ç–µ–≥–æ–º '{tag}':")
            for doc in docs:
                # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–∞–π–ª —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ uploads)
                file_path = os.path.join(os.getcwd(), 'uploads', doc[1])

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                if os.path.exists(file_path):
                    created_at = doc[4]
                    formatted_date = created_at.strftime('%d %B %Y, %H:%M')

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
                    doc_info = (
                        f"üÜî *ID –¥–æ–∫—É–º–µ–Ω—Ç–∞:* {doc[0]}\n"
                        f"üè∑Ô∏è *–¢–µ–≥:* {escape_markdown(doc[3])}\n"
                        f"üìÖ *–°–æ–∑–¥–∞–Ω:* {escape_markdown(formatted_date)}\n"
                    )
                    bot.send_message(message.chat.id, doc_info, parse_mode='Markdown')

                    with open(file_path, 'rb') as file:
                        bot.send_document(message.chat.id, file)
                else:
                    bot.send_message(message.chat.id, f"–§–∞–π–ª '{doc[1]}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            bot.send_message(message.chat.id, f"–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–≥–æ–º '{tag}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")


# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–µ–≥—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_docs_by_tag(conn, user_id, tag):
    sql_query = ''' SELECT id, title, body, tag, created_at FROM docs WHERE user_id = %s AND tag = %s; '''
    cursor = conn.cursor()
    cursor.execute(sql_query, (user_id, tag))
    docs = cursor.fetchall()
    cursor.close()
    return docs


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
@bot.message_handler(commands=['delete'])
def delete_document(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_delete_document)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
def process_delete_document(message):
    doc_id = message.text  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
    user_id = get_user_id_by_username(conn, message.from_user.username)

    if user_id:
        doc = get_doc_by_id(conn, user_id, doc_id)
        if doc:
            file_path = os.path.join(os.getcwd(), 'uploads', doc[1])

            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(file_path):
                os.remove(file_path)
                bot.send_message(message.chat.id, f"–§–∞–π–ª '{doc[1]}' –±—ã–ª —É–¥–∞–ª–µ–Ω.")
            else:
                bot.send_message(message.chat.id, f"–§–∞–π–ª '{doc[1]}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")

            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            delete_doc_from_db(conn, doc_id)
            bot.send_message(message.chat.id, "–î–æ–∫—É–º–µ–Ω—Ç –∏ —Ç–µ–≥ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        else:
            bot.send_message(message.chat.id, "–î–æ–∫—É–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ ID
def get_doc_by_id(conn, user_id, doc_id):
    sql_query = ''' SELECT id, title, body, tag, created_at FROM docs WHERE id = %s AND user_id = %s; '''
    cursor = conn.cursor()
    cursor.execute(sql_query, (doc_id, user_id))
    doc = cursor.fetchone()
    cursor.close()
    return doc


# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def delete_doc_from_db(conn, doc_id):
    sql_query = ''' DELETE FROM docs WHERE id = %s; '''
    cursor = conn.cursor()
    cursor.execute(sql_query, (doc_id,))
    conn.commit()
    cursor.close()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True, timeout=60)

# –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
conn.close()